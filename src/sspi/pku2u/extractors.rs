use std::convert::{TryFrom, TryInto};

use oid::ObjectIdentifier;
use picky_asn1::wrapper::IntegerAsn1;
use picky_asn1_der::application_tag::ApplicationTag;
use picky_asn1_der::Asn1RawDer;
use picky_asn1_x509::content_info::ContentValue;
use picky_asn1_x509::oids::PKINIT_DH_KEY_DATA;
use picky_asn1_x509::signed_data::SignedData;
use picky_krb::constants::key_usages::{AS_REP_ENC, AP_REQ_AUTHENTICATOR};
use picky_krb::constants::types::{PA_PK_AS_REP, PA_PK_AS_REQ};
use picky_krb::crypto::CipherSuite;
use picky_krb::crypto::diffie_hellman::{generate_key, generate_private_key, DhNonce, compute_public_key};
use picky_krb::data_types::Authenticator;
use picky_krb::messages::{AsRep, EncAsRepPart, AsReq, ApReq};
use picky_krb::pkinit::{DhRepInfo, KdcDhKeyInfo, PaPkAsRep, PaPkAsReq, AuthPack};
use rand::rngs::OsRng;
use serde::Deserialize;

use super::generators::DH_NONCE_LEN;
use crate::kerberos::{EncryptionParams, DEFAULT_ENCRYPTION_TYPE};
use crate::{Error, ErrorKind, Result};

pub fn extract_krb_rep<'a, T: Deserialize<'a>>(mut data: &'a [u8]) -> Result<(T, &'a [u8])> {
    let _oid: ApplicationTag<Asn1RawDer, 0> =
        picky_asn1_der::from_reader(&mut data).map_err(|e| Error::new(ErrorKind::InvalidToken, format!("{:?}", e)))?;

    // let oid: ObjectIdentifierAsn1 = picky_asn1_der::from_bytes(&oid.0.0)?;

    // let mut token_id = [0, 0];
    // data.read_exact(&mut token_id)?;

    // if token_id != AS_REP_TOKEN_ID {
    //     return Err(Error::new(
    //         ErrorKind::InvalidToken,
    //         format!("Invalid token id: {:?}. Expected: {:?}", token_id, AS_REP_TOKEN_ID),
    //     ));
    // }

    Ok((picky_asn1_der::from_bytes(data)?, data))
}

pub fn extract_pa_pk_as_rep(as_rep: &AsRep) -> Result<PaPkAsRep> {
    Ok(picky_asn1_der::from_bytes(
        &as_rep
            .0
            .padata
            .0
            .as_ref()
            .ok_or_else(|| Error::new(ErrorKind::InvalidToken, "pa-datas is not present in as rep".into()))?
            .iter()
            .find(|pa_data| &pa_data.padata_type.0 .0 == &PA_PK_AS_REP)
            .ok_or_else(|| {
                Error::new(
                    ErrorKind::InvalidToken,
                    "PA_PK_AS_REP is not present in pa-datas of the as rep".into(),
                )
            })?
            .padata_data
            .0
             .0,
    )?)
}

pub fn extract_server_nonce(dh_rep_info: &DhRepInfo) -> Result<[u8; DH_NONCE_LEN]> {
    let nonce = dh_rep_info
        .server_dh_nonce
        .0
        .as_ref()
        .map(|nonce| nonce.0 .0.clone())
        .ok_or_else(|| Error::new(ErrorKind::InvalidToken, "DH server nonce is not present".into()))?;

    if nonce.len() != DH_NONCE_LEN {
        return Err(Error::new(
            ErrorKind::InvalidToken,
            format!(
                "invalid server dh nonce length: {}. Expected: {}",
                nonce.len(),
                DH_NONCE_LEN
            ),
        ));
    }

    Ok(nonce.try_into().unwrap())
}

pub fn extract_server_dh_public_key(signed_data: &SignedData) -> Result<Vec<u8>> {
    let pkinit_dh_key_data = ObjectIdentifier::try_from(PKINIT_DH_KEY_DATA).unwrap();
    if signed_data.content_info.content_type.0 != pkinit_dh_key_data {
        return Err(Error::new(
            ErrorKind::InvalidToken,
            format!(
                "Invalid content info identifier: {:?}. Expected: {:?}",
                signed_data.content_info.content_type.0, pkinit_dh_key_data
            ),
        ));
    }

    let dh_key_info_data = match &signed_data
        .content_info
        .content
        .as_ref()
        .ok_or_else(|| Error::new(ErrorKind::InvalidToken, "content info is not present".into()))?
        .0
    {
        ContentValue::OctetString(data) => &data.0,
        _ => return Err(Error::new(ErrorKind::InvalidToken, "unexpected content info".into())),
    };

    let dh_key_info: KdcDhKeyInfo = picky_asn1_der::from_bytes(dh_key_info_data)?;

    if dh_key_info.nonce.0 != vec![0] {
        return Err(Error::new(
            ErrorKind::InvalidToken,
            format!("DH key nonce must be 0. Got: {:?}", dh_key_info.nonce.0),
        ));
    }

    let key: IntegerAsn1 = picky_asn1_der::from_bytes(dh_key_info.subject_public_key.0.payload_view())?;

    Ok(key.as_unsigned_bytes_be().to_vec())
}

pub fn extract_session_key_from_as_rep(as_rep: &AsRep, key: &[u8], enc_params: &EncryptionParams) -> Result<Vec<u8>> {
    let cipher = enc_params
        .encryption_type
        .as_ref()
        .unwrap_or(&DEFAULT_ENCRYPTION_TYPE)
        .cipher();

    let enc_data = cipher
        .decrypt(&key, AS_REP_ENC, &as_rep.0.enc_part.0.cipher.0 .0)?;
    println!("as rep decrypted!");

    let enc_as_rep_part: EncAsRepPart = picky_asn1_der::from_bytes(&enc_data)?;
    println!("{:?}", enc_as_rep_part);

    Ok(enc_as_rep_part.0.key.0.key_value.0.to_vec())
}

pub fn extract_pa_pk_as_req(as_req: &AsReq) -> Result<PaPkAsReq> {
    Ok(picky_asn1_der::from_bytes(
        &as_req
            .0
            .padata
            .0
            .as_ref()
            .ok_or_else(|| Error::new(ErrorKind::InvalidToken, "pa-datas is not present in as rep".into()))?
            .iter()
            .find(|pa_data| &pa_data.padata_type.0 .0 == &PA_PK_AS_REQ)
            .ok_or_else(|| {
                Error::new(
                    ErrorKind::InvalidToken,
                    "PA_PK_AS_REP is not present in pa-datas of the as rep".into(),
                )
            })?
            .padata_data
            .0
             .0,
    )?)
}

pub fn compute_session_key_from_pa_pk_as_req(pa_pk_as_req: &PaPkAsReq, dh_server_nonce: &[u8]) -> Result<(Vec<u8>, Vec<u8>)> {
    let signed_data: SignedData = picky_asn1_der::from_bytes(&pa_pk_as_req.signed_auth_pack.0)?;
    let content = signed_data.content_info.content.unwrap().0;
    let auth_pack: AuthPack = picky_asn1_der::from_bytes(match &content {
        ContentValue::OctetString(data) => &data.0,
        c => unimplemented!("wrong content value: {:?}", c),
    })?;

    println!("server: auth pack decoded: {:?}", auth_pack);

    let dh_client_public_info = &auth_pack.client_public_value.0.as_ref().unwrap().0;

    println!("dh_client_public_info: {:?}", dh_client_public_info);

    let g = dh_client_public_info.key_info.key_info.g.0.clone();
    let p = dh_client_public_info.key_info.key_info.p.0.clone();
    let q = dh_client_public_info.key_info.key_info.q.0.clone();

    println!("try to parse client public: {:?}", dh_client_public_info.key_value.0.inner());
    println!("to decode as int: {:?}", &dh_client_public_info.key_value.0.inner()[1..]);
    let dh_client_public: IntegerAsn1 = picky_asn1_der::from_bytes(&dh_client_public_info.key_value.0.inner()[1..])?;
    println!("client public parsed");
    let dh_client_public = dh_client_public.0;

    let mut rng = OsRng::default();
    let dh_server_private = generate_private_key(&q, &mut rng);
    let dh_server_public = compute_public_key(&dh_server_private, &p, &g);

    let dh_client_nonce = auth_pack.client_dh_nonce.0.as_ref().unwrap().0.0.clone();

    let session_key = generate_key(
        &dh_client_public,
        &dh_server_private,
        &p,
        Some(DhNonce {
            client_nonce: &dh_client_nonce,
            server_nonce: dh_server_nonce,
        }),
        CipherSuite::Aes256CtsHmacSha196.cipher().as_ref()
    )?;

    Ok((session_key, dh_server_public))
}

pub fn extract_sub_session_key_from_ap_req(ap_req: &ApReq, session_key: &[u8]) -> Result<Vec<u8>> {
    let encrypted = &ap_req.0.authenticator.0.cipher.0.0;
    let decrypted = CipherSuite::Aes256CtsHmacSha196.cipher().decrypt(session_key, AP_REQ_AUTHENTICATOR, encrypted)?;
    println!("sub decrypted");
    let auth: Authenticator = picky_asn1_der::from_bytes(&decrypted)?;
    println!("sub parsed");
    Ok(auth.0.subkey.0.unwrap().0.key_value.0.0)
}

#[cfg(test)]
mod tests {
    use picky_asn1_der::application_tag::ApplicationTag;
    use picky_krb::{messages::{AsRep, AsReq}, crypto::{CipherSuite, diffie_hellman::{generate_key, DhNonce}, ChecksumSuite}, gss_api::KrbMessage, constants::key_usages::AP_REQ_AUTHENTICATOR};

    use crate::{kerberos::EncryptionParams, crypto::compute_sha256, internal::credssp::{SERVER_CLIENT_HASH_MAGIC, CLIENT_SERVER_HASH_MAGIC}};

    use super::{extract_krb_rep, extract_session_key_from_as_rep};

    #[test]
    fn as_rep_extraction() {
        let enc_type = CipherSuite::Aes256CtsHmacSha196;

        let as_rep: AsRep = picky_asn1_der::from_bytes(&[]).unwrap();

        let enc_params = EncryptionParams {
            encryption_type: Some(enc_type.clone()),
            session_key: None,
            sub_session_key: None,
            sspi_encrypt_key_usage: 0,
            sspi_decrypt_key_usage: 0,
        };

        let key = generate_key(
            &[],
            &[],
            &[],
            Some(DhNonce {
                client_nonce: &[142, 91, 149, 4, 44, 55, 103, 6, 75, 168, 207, 165, 162, 197, 172, 27, 2, 108, 166, 10, 240, 52, 179, 24, 56, 73, 137, 103, 160, 81, 236, 230],
                server_nonce: &[],
            }),
            enc_type.cipher().as_ref(),
        ).unwrap();

        println!("{:?}", extract_session_key_from_as_rep(&as_rep, &key, &enc_params).unwrap());
    }

    #[test]
    fn parse_as_req() {
        let data = [96, 130, 9, 48, 6, 6, 43, 6, 1, 5, 2, 7, 5, 0, 106, 130, 9, 34, 48, 130, 9, 30, 161, 3, 2, 1, 5, 162, 3, 2, 1, 10, 163, 130, 7, 252, 48, 130, 7, 248, 48, 130, 7, 244, 161, 3, 2, 1, 16, 162, 130, 7, 235, 4, 130, 7, 231, 48, 130, 7, 227, 128, 130, 7, 223, 48, 130, 7, 219, 2, 1, 3, 49, 11, 48, 9, 6, 5, 43, 14, 3, 2, 26, 5, 0, 48, 130, 2, 31, 6, 7, 43, 6, 1, 5, 2, 3, 1, 160, 130, 2, 18, 4, 130, 2, 14, 48, 130, 2, 10, 160, 57, 48, 55, 160, 5, 2, 3, 11, 210, 255, 161, 17, 24, 15, 50, 48, 50, 50, 48, 57, 50, 53, 50, 49, 49, 48, 48, 51, 90, 162, 3, 2, 1, 0, 163, 22, 4, 20, 214, 215, 210, 143, 189, 21, 220, 123, 16, 202, 62, 239, 143, 239, 72, 75, 129, 19, 192, 25, 161, 130, 1, 167, 48, 130, 1, 163, 48, 130, 1, 23, 6, 7, 42, 134, 72, 206, 62, 2, 1, 48, 130, 1, 10, 2, 129, 129, 0, 255, 255, 255, 255, 255, 255, 255, 255, 201, 15, 218, 162, 33, 104, 194, 52, 196, 198, 98, 139, 128, 220, 28, 209, 41, 2, 78, 8, 138, 103, 204, 116, 2, 11, 190, 166, 59, 19, 155, 34, 81, 74, 8, 121, 142, 52, 4, 221, 239, 149, 25, 179, 205, 58, 67, 27, 48, 43, 10, 109, 242, 95, 20, 55, 79, 225, 53, 109, 109, 81, 194, 69, 228, 133, 181, 118, 98, 94, 126, 198, 244, 76, 66, 233, 166, 55, 237, 107, 11, 255, 92, 182, 244, 6, 183, 237, 238, 56, 107, 251, 90, 137, 159, 165, 174, 159, 36, 17, 124, 75, 31, 230, 73, 40, 102, 81, 236, 230, 83, 129, 255, 255, 255, 255, 255, 255, 255, 255, 2, 1, 2, 2, 129, 128, 127, 255, 255, 255, 255, 255, 255, 255, 228, 135, 237, 81, 16, 180, 97, 26, 98, 99, 49, 69, 192, 110, 14, 104, 148, 129, 39, 4, 69, 51, 230, 58, 1, 5, 223, 83, 29, 137, 205, 145, 40, 165, 4, 60, 199, 26, 2, 110, 247, 202, 140, 217, 230, 157, 33, 141, 152, 21, 133, 54, 249, 47, 138, 27, 167, 240, 154, 182, 182, 168, 225, 34, 242, 66, 218, 187, 49, 47, 63, 99, 122, 38, 33, 116, 211, 27, 246, 181, 133, 255, 174, 91, 122, 3, 91, 246, 247, 28, 53, 253, 173, 68, 207, 210, 215, 79, 146, 8, 190, 37, 143, 243, 36, 148, 51, 40, 246, 115, 41, 192, 255, 255, 255, 255, 255, 255, 255, 255, 3, 129, 133, 0, 2, 129, 129, 0, 174, 64, 94, 199, 223, 241, 193, 152, 170, 68, 51, 76, 187, 174, 45, 73, 174, 189, 141, 45, 159, 152, 150, 206, 86, 139, 103, 220, 243, 88, 58, 18, 39, 91, 132, 169, 6, 194, 189, 101, 247, 71, 111, 4, 77, 136, 201, 61, 155, 194, 35, 162, 225, 107, 106, 107, 160, 103, 98, 48, 53, 47, 142, 6, 99, 25, 254, 47, 138, 206, 41, 37, 50, 7, 66, 244, 32, 231, 48, 233, 191, 127, 24, 14, 69, 218, 122, 155, 198, 66, 36, 234, 17, 57, 126, 117, 21, 203, 79, 251, 106, 218, 219, 248, 82, 147, 67, 118, 62, 170, 57, 210, 192, 15, 130, 254, 215, 164, 217, 186, 201, 99, 57, 191, 83, 133, 228, 135, 163, 34, 4, 32, 100, 207, 181, 107, 37, 161, 148, 45, 31, 19, 94, 23, 68, 103, 195, 118, 102, 234, 135, 247, 24, 237, 176, 201, 12, 149, 232, 200, 131, 26, 226, 145, 160, 130, 3, 217, 48, 130, 3, 213, 48, 130, 2, 189, 160, 3, 2, 1, 2, 2, 16, 2, 123, 121, 8, 93, 157, 174, 124, 206, 149, 168, 96, 188, 78, 65, 73, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11, 5, 0, 48, 77, 49, 75, 48, 73, 6, 3, 85, 4, 3, 30, 66, 0, 77, 0, 83, 0, 45, 0, 79, 0, 114, 0, 103, 0, 97, 0, 110, 0, 105, 0, 122, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 45, 0, 80, 0, 50, 0, 80, 0, 45, 0, 65, 0, 99, 0, 99, 0, 101, 0, 115, 0, 115, 0, 32, 0, 91, 0, 50, 0, 48, 0, 50, 0, 50, 0, 93, 48, 30, 23, 13, 50, 50, 48, 57, 50, 53, 50, 49, 48, 53, 48, 51, 90, 23, 13, 50, 50, 48, 57, 50, 53, 50, 50, 49, 48, 48, 51, 90, 48, 129, 142, 49, 52, 48, 50, 6, 10, 9, 146, 38, 137, 147, 242, 44, 100, 1, 25, 22, 36, 97, 57, 50, 53, 50, 52, 52, 56, 45, 57, 97, 98, 55, 45, 52, 57, 98, 48, 45, 98, 98, 53, 99, 45, 102, 50, 102, 57, 50, 51, 99, 56, 52, 54, 55, 50, 49, 61, 48, 59, 6, 3, 85, 4, 3, 12, 52, 83, 45, 49, 45, 49, 50, 45, 49, 45, 51, 54, 53, 51, 50, 49, 49, 48, 50, 50, 45, 49, 51, 51, 57, 48, 48, 54, 52, 50, 50, 45, 50, 54, 50, 55, 53, 55, 51, 57, 48, 48, 45, 49, 53, 54, 48, 55, 51, 52, 57, 49, 57, 49, 23, 48, 21, 6, 3, 85, 4, 3, 12, 14, 115, 55, 64, 100, 97, 116, 97, 97, 110, 115, 46, 99, 111, 109, 48, 130, 1, 34, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0, 3, 130, 1, 15, 0, 48, 130, 1, 10, 2, 130, 1, 1, 0, 165, 92, 124, 98, 210, 233, 204, 81, 70, 152, 57, 161, 35, 215, 249, 36, 245, 49, 214, 193, 30, 235, 18, 102, 223, 212, 48, 82, 227, 153, 96, 161, 219, 73, 36, 75, 197, 84, 97, 23, 46, 238, 74, 118, 18, 246, 7, 39, 211, 182, 251, 144, 154, 34, 140, 36, 152, 155, 226, 73, 177, 70, 165, 25, 253, 246, 82, 85, 40, 54, 154, 69, 198, 120, 95, 222, 21, 85, 143, 126, 158, 14, 40, 205, 67, 243, 211, 168, 228, 0, 97, 18, 87, 253, 219, 32, 33, 229, 212, 91, 186, 233, 11, 2, 97, 73, 20, 160, 30, 17, 40, 198, 215, 204, 238, 73, 89, 139, 51, 104, 102, 116, 167, 37, 149, 28, 238, 191, 5, 43, 84, 126, 232, 200, 123, 89, 103, 14, 174, 70, 239, 220, 245, 123, 140, 61, 232, 195, 199, 35, 111, 205, 135, 171, 5, 177, 72, 42, 110, 158, 29, 124, 202, 19, 216, 138, 219, 138, 25, 23, 198, 160, 217, 202, 198, 202, 56, 14, 226, 161, 40, 127, 171, 71, 17, 175, 119, 233, 168, 82, 108, 246, 13, 99, 42, 23, 149, 58, 133, 216, 183, 200, 17, 6, 134, 74, 133, 3, 87, 41, 32, 107, 93, 5, 236, 3, 88, 205, 143, 98, 92, 183, 123, 133, 71, 212, 21, 30, 170, 7, 234, 198, 177, 190, 175, 174, 230, 251, 133, 4, 123, 12, 31, 69, 36, 52, 89, 190, 145, 154, 57, 88, 180, 44, 185, 157, 2, 3, 1, 0, 1, 163, 111, 48, 109, 48, 14, 6, 3, 85, 29, 15, 1, 1, 255, 4, 4, 3, 2, 5, 160, 48, 41, 6, 3, 85, 29, 17, 4, 34, 48, 32, 160, 30, 6, 10, 43, 6, 1, 4, 1, 130, 55, 20, 2, 3, 160, 16, 12, 14, 115, 55, 64, 100, 97, 116, 97, 97, 110, 115, 46, 99, 111, 109, 48, 19, 6, 3, 85, 29, 37, 4, 12, 48, 10, 6, 8, 43, 6, 1, 5, 5, 7, 3, 2, 48, 27, 6, 9, 43, 6, 1, 4, 1, 130, 55, 21, 10, 4, 14, 48, 12, 48, 10, 6, 8, 43, 6, 1, 5, 5, 7, 3, 2, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11, 5, 0, 3, 130, 1, 1, 0, 31, 128, 225, 83, 187, 164, 76, 137, 246, 121, 91, 174, 72, 27, 173, 155, 58, 241, 57, 126, 140, 204, 205, 87, 3, 1, 30, 40, 235, 137, 47, 62, 201, 134, 157, 209, 89, 17, 140, 131, 88, 222, 173, 48, 242, 196, 105, 87, 100, 2, 218, 70, 239, 199, 176, 123, 233, 245, 75, 226, 58, 66, 85, 235, 41, 187, 135, 253, 189, 111, 164, 94, 89, 39, 200, 50, 154, 201, 165, 200, 73, 195, 115, 122, 112, 169, 18, 118, 5, 66, 231, 9, 183, 240, 76, 17, 82, 127, 200, 66, 78, 186, 69, 78, 20, 60, 191, 228, 101, 14, 33, 153, 250, 46, 27, 203, 23, 188, 202, 111, 164, 122, 50, 42, 188, 187, 13, 32, 182, 9, 175, 13, 62, 60, 18, 96, 29, 50, 15, 235, 159, 254, 48, 164, 92, 98, 93, 97, 191, 63, 250, 14, 144, 210, 176, 58, 233, 186, 238, 82, 92, 45, 103, 189, 103, 19, 13, 115, 49, 215, 119, 55, 220, 104, 245, 107, 48, 78, 133, 106, 101, 151, 150, 107, 16, 247, 137, 193, 35, 144, 195, 229, 209, 136, 108, 18, 40, 197, 61, 152, 57, 97, 83, 231, 1, 252, 205, 242, 149, 100, 128, 224, 122, 251, 87, 81, 185, 99, 83, 232, 201, 122, 113, 153, 126, 108, 156, 64, 37, 230, 139, 235, 139, 14, 252, 42, 10, 20, 34, 184, 20, 75, 33, 31, 52, 0, 224, 64, 219, 167, 7, 172, 35, 103, 186, 184, 49, 130, 1, 199, 48, 130, 1, 195, 2, 1, 1, 48, 97, 48, 77, 49, 75, 48, 73, 6, 3, 85, 4, 3, 30, 66, 0, 77, 0, 83, 0, 45, 0, 79, 0, 114, 0, 103, 0, 97, 0, 110, 0, 105, 0, 122, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 45, 0, 80, 0, 50, 0, 80, 0, 45, 0, 65, 0, 99, 0, 99, 0, 101, 0, 115, 0, 115, 0, 32, 0, 91, 0, 50, 0, 48, 0, 50, 0, 50, 0, 93, 2, 16, 2, 123, 121, 8, 93, 157, 174, 124, 206, 149, 168, 96, 188, 78, 65, 73, 48, 9, 6, 5, 43, 14, 3, 2, 26, 5, 0, 160, 61, 48, 22, 6, 9, 42, 134, 72, 134, 247, 13, 1, 9, 3, 49, 9, 6, 7, 43, 6, 1, 5, 2, 3, 1, 48, 35, 6, 9, 42, 134, 72, 134, 247, 13, 1, 9, 4, 49, 22, 4, 20, 37, 144, 68, 78, 210, 60, 230, 236, 125, 249, 8, 246, 201, 77, 20, 197, 108, 52, 75, 76, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0, 4, 130, 1, 0, 48, 127, 17, 243, 30, 27, 158, 81, 187, 246, 135, 199, 188, 180, 74, 19, 19, 201, 95, 142, 99, 234, 136, 80, 71, 222, 71, 215, 251, 157, 78, 191, 97, 63, 240, 189, 68, 54, 186, 182, 87, 106, 249, 127, 176, 220, 207, 191, 214, 158, 155, 182, 28, 230, 57, 172, 76, 203, 134, 248, 43, 70, 114, 183, 5, 111, 137, 6, 208, 219, 139, 231, 164, 164, 206, 166, 69, 159, 70, 144, 168, 44, 139, 138, 8, 84, 2, 224, 192, 54, 238, 88, 174, 197, 135, 69, 235, 159, 72, 206, 13, 214, 121, 180, 203, 152, 186, 70, 167, 45, 127, 37, 89, 238, 118, 130, 56, 90, 54, 221, 72, 84, 48, 86, 58, 24, 242, 88, 78, 59, 8, 65, 27, 141, 157, 19, 59, 50, 155, 36, 68, 48, 119, 77, 36, 137, 128, 47, 129, 216, 235, 94, 253, 236, 181, 249, 254, 116, 123, 84, 211, 146, 251, 142, 134, 246, 128, 251, 173, 72, 204, 160, 42, 121, 78, 242, 27, 243, 168, 136, 42, 13, 162, 141, 139, 84, 151, 156, 215, 141, 110, 39, 236, 155, 76, 115, 224, 254, 180, 69, 238, 134, 73, 101, 155, 194, 202, 63, 22, 97, 6, 166, 14, 76, 191, 231, 247, 230, 12, 169, 228, 9, 88, 32, 251, 241, 138, 8, 146, 20, 252, 27, 82, 204, 112, 98, 110, 168, 240, 76, 96, 38, 73, 88, 251, 202, 75, 147, 96, 223, 110, 226, 48, 136, 51, 238, 164, 130, 1, 16, 48, 130, 1, 12, 160, 7, 3, 5, 0, 64, 129, 0, 16, 161, 107, 48, 105, 160, 3, 2, 1, 128, 161, 98, 48, 96, 27, 94, 65, 122, 117, 114, 101, 65, 68, 92, 77, 83, 45, 79, 114, 103, 97, 110, 105, 122, 97, 116, 105, 111, 110, 45, 80, 50, 80, 45, 65, 99, 99, 101, 115, 115, 32, 91, 50, 48, 50, 50, 93, 92, 83, 45, 49, 45, 49, 50, 45, 49, 45, 51, 54, 53, 51, 50, 49, 49, 48, 50, 50, 45, 49, 51, 51, 57, 48, 48, 54, 52, 50, 50, 45, 50, 54, 50, 55, 53, 55, 51, 57, 48, 48, 45, 49, 53, 54, 48, 55, 51, 52, 57, 49, 57, 162, 17, 27, 15, 87, 69, 76, 76, 75, 78, 79, 87, 78, 58, 80, 75, 85, 50, 85, 163, 35, 48, 33, 160, 3, 2, 1, 2, 161, 26, 48, 24, 27, 7, 84, 69, 82, 77, 83, 82, 86, 27, 13, 49, 57, 50, 46, 49, 54, 56, 46, 48, 46, 49, 48, 52, 165, 17, 24, 15, 50, 48, 51, 55, 48, 57, 49, 52, 48, 50, 52, 56, 48, 53, 90, 166, 17, 24, 15, 50, 48, 51, 55, 48, 57, 49, 52, 48, 50, 52, 56, 48, 53, 90, 167, 3, 2, 1, 0, 168, 18, 48, 16, 2, 1, 18, 2, 1, 17, 2, 1, 23, 2, 1, 24, 2, 2, 255, 121, 169, 29, 48, 27, 48, 25, 160, 3, 2, 1, 20, 161, 18, 4, 16, 68, 69, 83, 75, 84, 79, 80, 45, 56, 70, 51, 51, 82, 70, 72, 32];

        // let data: ApplicationTag<KrbMessage<AsReq>, 0> = picky_asn1_der::from_bytes(&data).unwrap();

        println!("{:?}", data);
    }

    #[test]
    fn decrypt_as_req() {
        let data = [203, 146, 230, 11, 20, 98, 198, 51, 49, 122, 91, 183, 216, 48, 207, 19, 122, 99, 223, 121, 139, 21, 32, 115, 96, 67, 129, 28, 181, 111, 33, 28, 74, 101, 53, 34, 144, 147, 253, 250, 126, 46, 91, 81, 48, 85, 2, 33, 106, 34, 22, 234, 179, 20, 247, 197, 113, 237, 243, 9, 32, 244, 114, 237, 120, 215, 57, 68, 157, 38, 234, 141, 115, 33, 252, 161];
        let key = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2];
        let cipher = CipherSuite::Aes256CtsHmacSha196.cipher();
        println!("{:?}", cipher.decrypt(&key, AP_REQ_AUTHENTICATOR, &data));
    }

    #[test]
    fn verify_negoex_checksum() {
        let data1 = [96, 130, 9, 51, 6, 6, 43, 6, 1, 5, 2, 7, 5, 0, 106, 130, 9, 37, 48, 130, 9, 33, 161, 3, 2, 1, 5, 162, 3, 2, 1, 10, 163, 130, 7, 252, 48, 130, 7, 248, 48, 130, 7, 244, 161, 3, 2, 1, 16, 162, 130, 7, 235, 4, 130, 7, 231, 48, 130, 7, 227, 128, 130, 7, 223, 48, 130, 7, 219, 2, 1, 3, 49, 11, 48, 9, 6, 5, 43, 14, 3, 2, 26, 5, 0, 48, 130, 2, 31, 6, 7, 43, 6, 1, 5, 2, 3, 1, 160, 130, 2, 18, 4, 130, 2, 14, 48, 130, 2, 10, 160, 57, 48, 55, 160, 5, 2, 3, 13, 97, 192, 161, 17, 24, 15, 50, 48, 50, 50, 49, 48, 49, 56, 49, 50, 48, 52, 48, 49, 90, 162, 3, 2, 1, 0, 163, 22, 4, 20, 45, 173, 122, 150, 137, 139, 32, 235, 244, 130, 94, 92, 244, 22, 245, 234, 197, 252, 242, 134, 161, 130, 1, 167, 48, 130, 1, 163, 48, 130, 1, 23, 6, 7, 42, 134, 72, 206, 62, 2, 1, 48, 130, 1, 10, 2, 129, 129, 0, 255, 255, 255, 255, 255, 255, 255, 255, 201, 15, 218, 162, 33, 104, 194, 52, 196, 198, 98, 139, 128, 220, 28, 209, 41, 2, 78, 8, 138, 103, 204, 116, 2, 11, 190, 166, 59, 19, 155, 34, 81, 74, 8, 121, 142, 52, 4, 221, 239, 149, 25, 179, 205, 58, 67, 27, 48, 43, 10, 109, 242, 95, 20, 55, 79, 225, 53, 109, 109, 81, 194, 69, 228, 133, 181, 118, 98, 94, 126, 198, 244, 76, 66, 233, 166, 55, 237, 107, 11, 255, 92, 182, 244, 6, 183, 237, 238, 56, 107, 251, 90, 137, 159, 165, 174, 159, 36, 17, 124, 75, 31, 230, 73, 40, 102, 81, 236, 230, 83, 129, 255, 255, 255, 255, 255, 255, 255, 255, 2, 1, 2, 2, 129, 128, 127, 255, 255, 255, 255, 255, 255, 255, 228, 135, 237, 81, 16, 180, 97, 26, 98, 99, 49, 69, 192, 110, 14, 104, 148, 129, 39, 4, 69, 51, 230, 58, 1, 5, 223, 83, 29, 137, 205, 145, 40, 165, 4, 60, 199, 26, 2, 110, 247, 202, 140, 217, 230, 157, 33, 141, 152, 21, 133, 54, 249, 47, 138, 27, 167, 240, 154, 182, 182, 168, 225, 34, 242, 66, 218, 187, 49, 47, 63, 99, 122, 38, 33, 116, 211, 27, 246, 181, 133, 255, 174, 91, 122, 3, 91, 246, 247, 28, 53, 253, 173, 68, 207, 210, 215, 79, 146, 8, 190, 37, 143, 243, 36, 148, 51, 40, 246, 115, 41, 192, 255, 255, 255, 255, 255, 255, 255, 255, 3, 129, 133, 0, 2, 129, 129, 0, 151, 24, 52, 147, 118, 138, 92, 6, 45, 3, 236, 27, 46, 7, 29, 189, 183, 96, 220, 161, 165, 69, 55, 26, 141, 164, 139, 110, 121, 229, 65, 150, 169, 35, 144, 154, 91, 94, 100, 216, 78, 173, 87, 120, 81, 222, 166, 35, 206, 48, 39, 64, 165, 128, 126, 207, 91, 150, 190, 208, 45, 175, 210, 107, 74, 32, 132, 95, 7, 125, 180, 28, 7, 12, 101, 208, 162, 126, 88, 206, 7, 231, 64, 29, 7, 148, 38, 148, 3, 63, 169, 139, 204, 15, 85, 204, 3, 2, 106, 76, 93, 174, 17, 155, 201, 238, 92, 76, 234, 48, 188, 53, 111, 5, 240, 190, 208, 189, 10, 237, 138, 155, 74, 3, 68, 67, 186, 159, 163, 34, 4, 32, 125, 155, 92, 183, 4, 93, 208, 163, 208, 162, 127, 191, 223, 96, 159, 119, 126, 174, 127, 34, 149, 135, 1, 192, 164, 184, 189, 38, 80, 226, 112, 146, 160, 130, 3, 217, 48, 130, 3, 213, 48, 130, 2, 189, 160, 3, 2, 1, 2, 2, 16, 14, 210, 35, 212, 198, 27, 116, 144, 237, 113, 88, 109, 15, 25, 113, 249, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11, 5, 0, 48, 77, 49, 75, 48, 73, 6, 3, 85, 4, 3, 30, 66, 0, 77, 0, 83, 0, 45, 0, 79, 0, 114, 0, 103, 0, 97, 0, 110, 0, 105, 0, 122, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 45, 0, 80, 0, 50, 0, 80, 0, 45, 0, 65, 0, 99, 0, 99, 0, 101, 0, 115, 0, 115, 0, 32, 0, 91, 0, 50, 0, 48, 0, 50, 0, 50, 0, 93, 48, 30, 23, 13, 50, 50, 49, 48, 49, 56, 49, 49, 53, 57, 48, 49, 90, 23, 13, 50, 50, 49, 48, 49, 56, 49, 51, 48, 52, 48, 49, 90, 48, 129, 142, 49, 52, 48, 50, 6, 10, 9, 146, 38, 137, 147, 242, 44, 100, 1, 25, 22, 36, 97, 57, 50, 53, 50, 52, 52, 56, 45, 57, 97, 98, 55, 45, 52, 57, 98, 48, 45, 98, 98, 53, 99, 45, 102, 50, 102, 57, 50, 51, 99, 56, 52, 54, 55, 50, 49, 61, 48, 59, 6, 3, 85, 4, 3, 12, 52, 83, 45, 49, 45, 49, 50, 45, 49, 45, 51, 54, 53, 51, 50, 49, 49, 48, 50, 50, 45, 49, 51, 51, 57, 48, 48, 54, 52, 50, 50, 45, 50, 54, 50, 55, 53, 55, 51, 57, 48, 48, 45, 49, 53, 54, 48, 55, 51, 52, 57, 49, 57, 49, 23, 48, 21, 6, 3, 85, 4, 3, 12, 14, 115, 55, 64, 100, 97, 116, 97, 97, 110, 115, 46, 99, 111, 109, 48, 130, 1, 34, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0, 3, 130, 1, 15, 0, 48, 130, 1, 10, 2, 130, 1, 1, 0, 173, 251, 243, 19, 51, 228, 187, 103, 173, 45, 14, 235, 229, 200, 184, 172, 79, 101, 201, 157, 201, 28, 66, 14, 158, 45, 219, 105, 95, 152, 174, 49, 150, 40, 19, 65, 17, 108, 238, 224, 35, 114, 196, 224, 57, 138, 186, 30, 154, 220, 113, 212, 240, 226, 40, 102, 231, 178, 168, 200, 254, 55, 130, 79, 202, 19, 203, 158, 160, 153, 66, 120, 43, 72, 185, 153, 90, 140, 93, 204, 197, 248, 133, 218, 101, 85, 214, 133, 112, 242, 95, 101, 132, 118, 241, 62, 101, 94, 198, 55, 12, 244, 156, 9, 57, 32, 171, 252, 27, 58, 183, 252, 199, 118, 236, 129, 92, 74, 22, 145, 135, 98, 104, 171, 145, 216, 106, 228, 69, 227, 29, 85, 162, 25, 78, 99, 70, 43, 96, 105, 5, 17, 56, 131, 111, 185, 129, 91, 89, 144, 122, 165, 51, 244, 85, 236, 235, 10, 238, 185, 197, 191, 22, 94, 2, 213, 174, 248, 243, 23, 164, 21, 248, 128, 94, 112, 93, 116, 73, 61, 29, 5, 108, 9, 252, 248, 195, 109, 232, 95, 78, 146, 94, 100, 39, 127, 18, 128, 181, 89, 125, 228, 158, 77, 228, 44, 148, 176, 130, 207, 100, 66, 128, 103, 211, 73, 239, 134, 34, 150, 243, 150, 24, 131, 109, 11, 37, 245, 68, 108, 214, 29, 58, 79, 31, 218, 36, 88, 40, 146, 38, 202, 97, 1, 106, 114, 20, 76, 42, 77, 62, 65, 86, 8, 230, 217, 2, 3, 1, 0, 1, 163, 111, 48, 109, 48, 14, 6, 3, 85, 29, 15, 1, 1, 255, 4, 4, 3, 2, 5, 160, 48, 41, 6, 3, 85, 29, 17, 4, 34, 48, 32, 160, 30, 6, 10, 43, 6, 1, 4, 1, 130, 55, 20, 2, 3, 160, 16, 12, 14, 115, 55, 64, 100, 97, 116, 97, 97, 110, 115, 46, 99, 111, 109, 48, 19, 6, 3, 85, 29, 37, 4, 12, 48, 10, 6, 8, 43, 6, 1, 5, 5, 7, 3, 2, 48, 27, 6, 9, 43, 6, 1, 4, 1, 130, 55, 21, 10, 4, 14, 48, 12, 48, 10, 6, 8, 43, 6, 1, 5, 5, 7, 3, 2, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11, 5, 0, 3, 130, 1, 1, 0, 47, 111, 124, 21, 189, 180, 98, 44, 39, 253, 124, 31, 82, 162, 161, 55, 248, 125, 72, 204, 73, 174, 205, 120, 249, 57, 81, 43, 124, 21, 192, 8, 222, 60, 204, 90, 206, 239, 21, 24, 53, 20, 166, 233, 245, 47, 165, 153, 216, 69, 143, 243, 221, 24, 4, 249, 81, 156, 233, 26, 254, 10, 54, 195, 176, 55, 169, 73, 111, 161, 133, 91, 149, 130, 86, 75, 47, 119, 188, 185, 39, 108, 102, 123, 19, 193, 103, 106, 155, 223, 113, 128, 39, 57, 38, 171, 163, 128, 56, 171, 128, 222, 135, 10, 210, 129, 246, 179, 48, 237, 219, 233, 195, 170, 146, 88, 226, 54, 96, 81, 245, 32, 48, 163, 119, 105, 147, 137, 97, 226, 27, 53, 72, 131, 205, 110, 216, 191, 76, 103, 108, 121, 147, 234, 149, 189, 207, 166, 72, 112, 6, 155, 136, 180, 199, 135, 167, 137, 113, 199, 32, 63, 173, 152, 87, 55, 126, 215, 113, 188, 207, 253, 237, 169, 178, 9, 238, 221, 59, 6, 45, 212, 69, 7, 221, 54, 5, 56, 56, 247, 52, 185, 132, 172, 158, 100, 94, 122, 192, 80, 103, 113, 95, 31, 181, 38, 145, 61, 137, 0, 87, 241, 10, 143, 134, 99, 164, 100, 77, 155, 181, 96, 65, 233, 181, 179, 6, 56, 216, 63, 114, 102, 69, 95, 62, 57, 174, 176, 183, 78, 132, 59, 33, 207, 196, 197, 155, 88, 44, 173, 128, 197, 116, 80, 221, 225, 49, 130, 1, 199, 48, 130, 1, 195, 2, 1, 1, 48, 97, 48, 77, 49, 75, 48, 73, 6, 3, 85, 4, 3, 30, 66, 0, 77, 0, 83, 0, 45, 0, 79, 0, 114, 0, 103, 0, 97, 0, 110, 0, 105, 0, 122, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 45, 0, 80, 0, 50, 0, 80, 0, 45, 0, 65, 0, 99, 0, 99, 0, 101, 0, 115, 0, 115, 0, 32, 0, 91, 0, 50, 0, 48, 0, 50, 0, 50, 0, 93, 2, 16, 14, 210, 35, 212, 198, 27, 116, 144, 237, 113, 88, 109, 15, 25, 113, 249, 48, 9, 6, 5, 43, 14, 3, 2, 26, 5, 0, 160, 61, 48, 22, 6, 9, 42, 134, 72, 134, 247, 13, 1, 9, 3, 49, 9, 6, 7, 43, 6, 1, 5, 2, 3, 1, 48, 35, 6, 9, 42, 134, 72, 134, 247, 13, 1, 9, 4, 49, 22, 4, 20, 218, 28, 219, 222, 185, 242, 160, 207, 42, 202, 3, 49, 215, 53, 191, 207, 29, 110, 18, 227, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0, 4, 130, 1, 0, 64, 139, 117, 205, 62, 31, 170, 243, 112, 128, 128, 222, 92, 12, 120, 42, 94, 228, 127, 152, 126, 118, 156, 227, 18, 211, 70, 236, 128, 223, 122, 156, 50, 31, 198, 191, 244, 170, 17, 250, 206, 16, 37, 213, 238, 223, 2, 215, 221, 116, 68, 57, 26, 31, 234, 115, 37, 34, 203, 185, 17, 134, 12, 225, 234, 157, 246, 53, 223, 40, 148, 232, 57, 165, 148, 217, 61, 24, 205, 114, 171, 212, 4, 2, 210, 57, 93, 9, 177, 191, 125, 237, 238, 235, 101, 187, 54, 32, 68, 71, 120, 20, 177, 42, 176, 128, 172, 169, 134, 112, 211, 136, 36, 156, 28, 104, 251, 42, 33, 255, 168, 182, 212, 150, 103, 111, 121, 133, 116, 183, 202, 149, 220, 93, 191, 97, 49, 245, 48, 11, 215, 98, 175, 212, 15, 132, 128, 109, 182, 91, 254, 73, 14, 28, 158, 152, 44, 167, 75, 18, 111, 196, 232, 15, 168, 130, 70, 129, 204, 16, 208, 133, 123, 28, 252, 96, 219, 123, 148, 150, 101, 24, 59, 156, 7, 178, 36, 175, 110, 37, 4, 0, 71, 135, 170, 42, 43, 72, 94, 87, 250, 137, 23, 246, 87, 226, 209, 225, 207, 254, 45, 86, 79, 188, 155, 164, 134, 144, 98, 25, 34, 230, 247, 64, 141, 174, 140, 187, 19, 176, 254, 188, 196, 216, 23, 95, 240, 66, 58, 169, 223, 150, 157, 23, 3, 64, 114, 34, 128, 18, 114, 167, 74, 233, 229, 53, 164, 130, 1, 19, 48, 130, 1, 15, 160, 7, 3, 5, 0, 64, 129, 0, 16, 161, 107, 48, 105, 160, 3, 2, 1, 128, 161, 98, 48, 96, 27, 94, 65, 122, 117, 114, 101, 65, 68, 92, 77, 83, 45, 79, 114, 103, 97, 110, 105, 122, 97, 116, 105, 111, 110, 45, 80, 50, 80, 45, 65, 99, 99, 101, 115, 115, 32, 91, 50, 48, 50, 50, 93, 92, 83, 45, 49, 45, 49, 50, 45, 49, 45, 51, 54, 53, 51, 50, 49, 49, 48, 50, 50, 45, 49, 51, 51, 57, 48, 48, 54, 52, 50, 50, 45, 50, 54, 50, 55, 53, 55, 51, 57, 48, 48, 45, 49, 53, 54, 48, 55, 51, 52, 57, 49, 57, 162, 17, 27, 15, 87, 69, 76, 76, 75, 78, 79, 87, 78, 58, 80, 75, 85, 50, 85, 163, 38, 48, 36, 160, 3, 2, 1, 2, 161, 29, 48, 27, 27, 7, 84, 69, 82, 77, 83, 82, 86, 27, 16, 100, 101, 115, 116, 46, 100, 97, 116, 97, 97, 110, 115, 46, 99, 111, 109, 165, 17, 24, 15, 50, 48, 51, 55, 48, 57, 49, 52, 48, 50, 52, 56, 48, 53, 90, 166, 17, 24, 15, 50, 48, 51, 55, 48, 57, 49, 52, 48, 50, 52, 56, 48, 53, 90, 167, 3, 2, 1, 0, 168, 18, 48, 16, 2, 1, 18, 2, 1, 17, 2, 1, 23, 2, 1, 24, 2, 2, 255, 121, 169, 29, 48, 27, 48, 25, 160, 3, 2, 1, 20, 161, 18, 4, 16, 68, 69, 83, 75, 84, 79, 80, 45, 56, 70, 51, 51, 82, 70, 72, 32, 96, 130, 11, 132, 6, 6, 43, 6, 1, 5, 2, 7, 6, 0, 107, 130, 11, 118, 48, 130, 11, 114, 160, 3, 2, 1, 5, 161, 3, 2, 1, 11, 162, 130, 6, 106, 48, 130, 6, 102, 48, 130, 6, 98, 161, 3, 2, 1, 17, 162, 130, 6, 89, 4, 130, 6, 85, 160, 130, 6, 81, 48, 130, 6, 77, 128, 130, 6, 37, 48, 130, 6, 33, 2, 1, 3, 49, 11, 48, 9, 6, 5, 43, 14, 3, 2, 26, 5, 0, 48, 129, 161, 6, 7, 43, 6, 1, 5, 2, 3, 2, 160, 129, 149, 4, 129, 146, 48, 129, 143, 160, 129, 135, 3, 129, 132, 0, 2, 129, 128, 215, 117, 217, 80, 121, 91, 18, 25, 68, 12, 147, 62, 133, 153, 19, 222, 155, 87, 168, 85, 31, 146, 8, 189, 73, 209, 35, 10, 182, 72, 13, 88, 225, 198, 131, 113, 8, 2, 72, 53, 24, 223, 241, 117, 172, 53, 145, 188, 244, 131, 183, 21, 214, 0, 179, 123, 4, 229, 117, 142, 111, 140, 166, 98, 97, 227, 161, 149, 168, 231, 254, 87, 240, 162, 184, 2, 21, 29, 242, 144, 112, 198, 60, 231, 48, 81, 77, 94, 127, 113, 144, 99, 24, 45, 33, 248, 161, 232, 94, 81, 89, 217, 203, 104, 84, 89, 165, 170, 157, 139, 250, 42, 141, 107, 128, 243, 42, 108, 205, 252, 99, 183, 249, 186, 147, 13, 102, 119, 161, 3, 2, 1, 0, 160, 130, 3, 158, 48, 130, 3, 154, 48, 130, 2, 130, 160, 3, 2, 1, 2, 2, 16, 62, 39, 192, 20, 152, 7, 29, 243, 143, 63, 80, 234, 220, 89, 56, 82, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11, 5, 0, 48, 77, 49, 75, 48, 73, 6, 3, 85, 4, 3, 30, 66, 0, 77, 0, 83, 0, 45, 0, 79, 0, 114, 0, 103, 0, 97, 0, 110, 0, 105, 0, 122, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 45, 0, 80, 0, 50, 0, 80, 0, 45, 0, 65, 0, 99, 0, 99, 0, 101, 0, 115, 0, 115, 0, 32, 0, 91, 0, 50, 0, 48, 0, 50, 0, 50, 0, 93, 48, 30, 23, 13, 50, 50, 49, 48, 49, 56, 48, 54, 52, 51, 53, 48, 90, 23, 13, 50, 50, 49, 48, 49, 57, 48, 54, 52, 56, 53, 48, 90, 48, 101, 49, 52, 48, 50, 6, 10, 9, 146, 38, 137, 147, 242, 44, 100, 1, 25, 22, 36, 97, 57, 50, 53, 50, 52, 52, 56, 45, 57, 97, 98, 55, 45, 52, 57, 98, 48, 45, 98, 98, 53, 99, 45, 102, 50, 102, 57, 50, 51, 99, 56, 52, 54, 55, 50, 49, 45, 48, 43, 6, 3, 85, 4, 3, 12, 36, 99, 57, 98, 54, 99, 98, 100, 100, 45, 100, 51, 102, 48, 45, 52, 97, 99, 51, 45, 57, 56, 55, 57, 45, 101, 48, 97, 101, 51, 98, 54, 49, 98, 100, 57, 52, 48, 130, 1, 34, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0, 3, 130, 1, 15, 0, 48, 130, 1, 10, 2, 130, 1, 1, 0, 199, 60, 253, 49, 157, 172, 15, 185, 180, 104, 241, 218, 22, 185, 120, 213, 135, 223, 222, 100, 75, 148, 218, 177, 71, 131, 140, 8, 195, 173, 7, 244, 41, 200, 45, 77, 173, 68, 205, 213, 27, 72, 246, 147, 167, 184, 52, 81, 44, 28, 143, 238, 201, 186, 143, 111, 62, 224, 73, 86, 69, 249, 239, 44, 79, 115, 37, 185, 243, 1, 23, 234, 116, 28, 244, 221, 99, 62, 177, 39, 128, 239, 115, 47, 184, 135, 25, 43, 109, 246, 200, 11, 116, 38, 99, 167, 136, 48, 59, 187, 188, 40, 216, 85, 133, 246, 5, 130, 177, 220, 6, 210, 34, 164, 15, 207, 125, 223, 42, 190, 77, 109, 69, 224, 132, 147, 115, 110, 39, 205, 112, 140, 44, 215, 43, 252, 206, 89, 55, 161, 210, 166, 234, 223, 0, 198, 24, 70, 158, 56, 78, 23, 76, 249, 86, 198, 95, 207, 53, 220, 75, 246, 91, 138, 99, 193, 186, 97, 57, 207, 115, 14, 1, 251, 111, 180, 121, 41, 132, 254, 82, 109, 66, 202, 11, 20, 14, 31, 242, 55, 225, 112, 210, 220, 229, 155, 152, 202, 92, 54, 223, 38, 153, 248, 173, 168, 180, 70, 146, 219, 186, 166, 251, 234, 149, 41, 18, 61, 227, 148, 13, 141, 229, 1, 49, 212, 128, 67, 225, 120, 7, 122, 41, 102, 241, 223, 249, 198, 117, 89, 37, 177, 142, 85, 24, 136, 230, 160, 136, 43, 89, 66, 41, 220, 85, 85, 2, 3, 1, 0, 1, 163, 94, 48, 92, 48, 14, 6, 3, 85, 29, 15, 1, 1, 255, 4, 4, 3, 2, 5, 160, 48, 24, 6, 3, 85, 29, 17, 4, 17, 48, 15, 130, 13, 49, 57, 50, 46, 49, 54, 56, 46, 48, 46, 49, 48, 57, 48, 19, 6, 3, 85, 29, 37, 4, 12, 48, 10, 6, 8, 43, 6, 1, 5, 5, 7, 3, 1, 48, 27, 6, 9, 43, 6, 1, 4, 1, 130, 55, 21, 10, 4, 14, 48, 12, 48, 10, 6, 8, 43, 6, 1, 5, 5, 7, 3, 1, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11, 5, 0, 3, 130, 1, 1, 0, 179, 0, 255, 32, 22, 238, 125, 85, 247, 225, 180, 111, 84, 165, 58, 193, 187, 225, 232, 171, 9, 43, 70, 138, 135, 196, 123, 59, 5, 215, 119, 225, 79, 156, 122, 254, 154, 205, 114, 165, 193, 251, 144, 217, 247, 15, 212, 222, 56, 5, 246, 164, 238, 254, 202, 170, 52, 206, 4, 93, 197, 184, 66, 74, 165, 157, 67, 82, 197, 143, 21, 82, 216, 219, 192, 125, 22, 32, 197, 14, 179, 206, 3, 229, 132, 134, 58, 161, 188, 105, 225, 44, 154, 42, 118, 53, 3, 104, 66, 210, 119, 0, 44, 160, 14, 28, 209, 18, 110, 44, 254, 156, 180, 211, 107, 109, 209, 82, 153, 164, 234, 62, 155, 185, 104, 124, 33, 29, 48, 110, 231, 50, 118, 48, 16, 120, 154, 31, 238, 193, 206, 155, 162, 155, 34, 90, 254, 170, 185, 49, 6, 100, 189, 107, 207, 34, 134, 35, 115, 148, 122, 202, 239, 59, 172, 148, 44, 65, 28, 65, 169, 68, 76, 251, 218, 121, 145, 110, 253, 15, 18, 235, 102, 45, 176, 93, 14, 169, 253, 50, 64, 208, 115, 48, 56, 123, 106, 95, 91, 104, 230, 70, 7, 108, 188, 3, 219, 161, 74, 153, 172, 229, 22, 201, 229, 143, 87, 76, 15, 129, 22, 158, 190, 18, 39, 130, 144, 12, 22, 144, 62, 36, 172, 123, 107, 194, 70, 109, 206, 19, 135, 215, 132, 225, 142, 207, 194, 33, 83, 164, 245, 163, 19, 186, 247, 209, 49, 130, 1, 199, 48, 130, 1, 195, 2, 1, 1, 48, 97, 48, 77, 49, 75, 48, 73, 6, 3, 85, 4, 3, 30, 66, 0, 77, 0, 83, 0, 45, 0, 79, 0, 114, 0, 103, 0, 97, 0, 110, 0, 105, 0, 122, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 45, 0, 80, 0, 50, 0, 80, 0, 45, 0, 65, 0, 99, 0, 99, 0, 101, 0, 115, 0, 115, 0, 32, 0, 91, 0, 50, 0, 48, 0, 50, 0, 50, 0, 93, 2, 16, 62, 39, 192, 20, 152, 7, 29, 243, 143, 63, 80, 234, 220, 89, 56, 82, 48, 9, 6, 5, 43, 14, 3, 2, 26, 5, 0, 160, 61, 48, 22, 6, 9, 42, 134, 72, 134, 247, 13, 1, 9, 3, 49, 9, 6, 7, 43, 6, 1, 5, 2, 3, 1, 48, 35, 6, 9, 42, 134, 72, 134, 247, 13, 1, 9, 4, 49, 22, 4, 20, 235, 101, 242, 9, 158, 189, 205, 170, 36, 132, 253, 172, 15, 194, 194, 92, 66, 96, 113, 177, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0, 4, 130, 1, 0, 25, 24, 14, 151, 120, 16, 99, 122, 206, 186, 7, 208, 41, 217, 24, 63, 124, 107, 174, 252, 129, 63, 236, 84, 172, 239, 37, 223, 254, 41, 188, 222, 11, 193, 134, 130, 145, 53, 196, 50, 38, 29, 76, 235, 228, 46, 12, 157, 67, 163, 228, 80, 83, 199, 59, 84, 57, 22, 103, 255, 176, 1, 244, 121, 140, 174, 31, 235, 14, 189, 27, 2, 37, 10, 78, 172, 32, 225, 162, 19, 101, 109, 224, 46, 4, 122, 10, 141, 13, 152, 101, 52, 31, 238, 241, 150, 253, 186, 224, 121, 190, 6, 209, 70, 180, 236, 172, 39, 17, 217, 253, 164, 117, 26, 229, 34, 147, 200, 51, 133, 196, 251, 106, 63, 15, 204, 31, 162, 230, 177, 102, 8, 30, 186, 91, 221, 115, 53, 211, 22, 16, 22, 231, 59, 159, 73, 145, 40, 19, 68, 174, 66, 42, 242, 146, 102, 51, 136, 208, 228, 163, 46, 187, 56, 101, 155, 246, 241, 76, 176, 65, 158, 74, 49, 244, 194, 89, 226, 193, 61, 171, 6, 74, 102, 94, 213, 18, 130, 243, 91, 163, 46, 91, 189, 23, 121, 85, 94, 116, 109, 10, 78, 242, 155, 169, 241, 60, 68, 79, 80, 147, 152, 239, 210, 182, 59, 94, 112, 62, 95, 2, 169, 64, 29, 144, 42, 118, 149, 89, 97, 180, 12, 156, 56, 127, 151, 158, 253, 152, 147, 201, 232, 198, 217, 206, 19, 8, 129, 219, 220, 169, 181, 181, 167, 220, 6, 161, 34, 4, 32, 142, 91, 149, 4, 44, 55, 103, 6, 75, 168, 207, 165, 162, 197, 172, 27, 2, 108, 166, 10, 240, 52, 179, 24, 56, 73, 137, 103, 160, 81, 236, 230, 163, 17, 27, 15, 87, 69, 76, 76, 75, 78, 79, 87, 78, 58, 80, 75, 85, 50, 85, 164, 35, 48, 33, 160, 3, 2, 1, 128, 161, 26, 48, 24, 27, 22, 65, 122, 117, 114, 101, 65, 68, 92, 115, 55, 64, 100, 97, 116, 97, 97, 110, 115, 46, 99, 111, 109, 165, 130, 3, 166, 97, 130, 3, 162, 48, 130, 3, 158, 160, 3, 2, 1, 5, 161, 17, 27, 15, 87, 69, 76, 76, 75, 78, 79, 87, 78, 58, 80, 75, 85, 50, 85, 162, 38, 48, 36, 160, 3, 2, 1, 2, 161, 29, 48, 27, 27, 7, 84, 69, 82, 77, 83, 82, 86, 27, 16, 100, 101, 115, 116, 46, 100, 97, 116, 97, 97, 110, 115, 46, 99, 111, 109, 163, 130, 3, 90, 48, 130, 3, 86, 160, 3, 2, 1, 18, 162, 130, 3, 77, 4, 130, 3, 73, 211, 68, 200, 157, 66, 82, 128, 82, 220, 246, 214, 194, 27, 126, 129, 98, 58, 221, 245, 200, 112, 218, 4, 68, 97, 0, 222, 203, 69, 31, 41, 86, 106, 196, 62, 240, 167, 246, 248, 193, 104, 59, 22, 204, 24, 99, 193, 25, 94, 201, 86, 198, 11, 100, 155, 58, 22, 14, 173, 195, 112, 223, 23, 161, 48, 80, 40, 189, 52, 81, 213, 229, 176, 161, 14, 85, 128, 46, 151, 112, 93, 183, 164, 240, 98, 133, 6, 224, 79, 41, 127, 15, 65, 143, 127, 154, 182, 50, 91, 134, 38, 116, 244, 228, 187, 205, 75, 146, 35, 228, 38, 136, 152, 24, 116, 41, 119, 147, 20, 242, 111, 224, 9, 236, 174, 193, 254, 96, 89, 84, 214, 95, 130, 60, 213, 229, 73, 173, 34, 144, 149, 15, 58, 63, 163, 199, 138, 204, 45, 163, 152, 36, 75, 26, 241, 237, 88, 241, 124, 80, 154, 114, 99, 20, 24, 82, 105, 219, 61, 226, 81, 196, 171, 182, 111, 160, 207, 97, 246, 217, 128, 35, 79, 72, 79, 30, 46, 3, 243, 180, 0, 42, 153, 219, 218, 96, 13, 16, 98, 61, 38, 4, 76, 63, 77, 242, 129, 16, 71, 39, 250, 84, 42, 179, 188, 5, 3, 137, 127, 203, 110, 37, 135, 246, 251, 26, 154, 6, 116, 200, 240, 199, 205, 105, 182, 201, 75, 63, 71, 29, 111, 140, 30, 24, 78, 47, 38, 97, 45, 24, 130, 141, 22, 103, 199, 110, 160, 163, 11, 147, 127, 90, 93, 135, 202, 191, 7, 90, 109, 66, 127, 148, 61, 219, 191, 178, 203, 162, 218, 241, 235, 89, 10, 138, 101, 44, 70, 26, 64, 177, 170, 253, 124, 192, 185, 192, 148, 172, 109, 58, 207, 7, 89, 130, 53, 73, 103, 223, 28, 228, 57, 199, 168, 136, 44, 27, 202, 10, 73, 49, 137, 246, 98, 164, 197, 127, 230, 147, 168, 210, 23, 17, 63, 106, 157, 113, 20, 7, 146, 174, 79, 242, 241, 22, 6, 134, 1, 225, 222, 124, 254, 22, 139, 72, 156, 224, 73, 101, 179, 168, 34, 245, 221, 122, 35, 61, 115, 35, 96, 19, 199, 149, 176, 54, 147, 108, 225, 73, 149, 204, 100, 1, 177, 205, 139, 138, 134, 133, 225, 119, 111, 84, 104, 167, 146, 163, 254, 56, 86, 233, 162, 4, 145, 161, 228, 122, 201, 16, 92, 171, 164, 237, 146, 210, 143, 127, 233, 184, 148, 110, 238, 253, 103, 98, 0, 96, 96, 12, 113, 168, 99, 137, 37, 124, 76, 108, 188, 200, 82, 199, 169, 192, 229, 34, 232, 198, 107, 217, 54, 60, 152, 198, 234, 110, 87, 50, 200, 237, 67, 226, 214, 208, 178, 100, 118, 240, 242, 212, 25, 149, 80, 2, 202, 143, 52, 140, 235, 222, 211, 54, 169, 228, 164, 136, 35, 62, 16, 53, 63, 55, 58, 144, 11, 32, 68, 79, 6, 35, 178, 147, 228, 21, 103, 27, 111, 22, 103, 77, 181, 230, 252, 90, 156, 47, 75, 171, 246, 217, 173, 55, 94, 241, 157, 143, 231, 92, 90, 114, 50, 210, 97, 152, 254, 49, 135, 116, 248, 220, 42, 5, 236, 41, 44, 112, 134, 29, 180, 186, 250, 220, 152, 27, 227, 28, 61, 194, 125, 162, 254, 168, 51, 59, 43, 134, 56, 202, 226, 51, 207, 243, 88, 169, 114, 101, 83, 97, 201, 39, 215, 123, 9, 6, 182, 125, 167, 189, 57, 221, 73, 28, 0, 198, 243, 75, 115, 232, 83, 119, 145, 193, 152, 25, 43, 116, 110, 193, 96, 178, 156, 156, 189, 51, 50, 231, 80, 236, 201, 236, 151, 211, 149, 56, 141, 37, 196, 209, 178, 94, 62, 151, 129, 214, 215, 227, 216, 92, 87, 131, 105, 101, 186, 99, 18, 168, 83, 55, 190, 108, 132, 217, 179, 77, 43, 189, 230, 43, 208, 213, 46, 46, 239, 40, 166, 93, 149, 65, 92, 109, 213, 99, 202, 249, 197, 34, 84, 171, 2, 75, 47, 134, 22, 114, 10, 251, 55, 98, 90, 163, 225, 69, 1, 142, 86, 189, 30, 248, 31, 11, 117, 3, 145, 87, 65, 247, 185, 59, 28, 13, 159, 197, 134, 36, 142, 48, 187, 210, 221, 225, 38, 89, 7, 23, 58, 191, 2, 217, 182, 175, 144, 9, 229, 218, 113, 88, 191, 30, 249, 234, 43, 143, 202, 105, 58, 79, 57, 215, 15, 56, 48, 175, 33, 100, 229, 96, 226, 104, 200, 255, 105, 151, 106, 248, 228, 23, 209, 34, 252, 24, 136, 156, 194, 117, 199, 48, 221, 251, 98, 15, 248, 61, 136, 110, 151, 173, 55, 134, 246, 166, 72, 254, 73, 181, 43, 71, 132, 132, 120, 244, 151, 161, 36, 52, 218, 247, 227, 218, 110, 10, 172, 41, 139, 88, 227, 175, 244, 200, 112, 24, 20, 122, 23, 168, 77, 16, 42, 74, 119, 188, 130, 198, 132, 102, 45, 152, 131, 201, 200, 49, 243, 171, 128, 166, 130, 1, 20, 48, 130, 1, 16, 160, 3, 2, 1, 18, 162, 130, 1, 7, 4, 130, 1, 3, 20, 63, 216, 86, 128, 71, 187, 136, 100, 232, 71, 187, 238, 143, 53, 1, 46, 136, 55, 255, 102, 54, 121, 86, 193, 116, 51, 68, 0, 240, 62, 202, 237, 52, 202, 53, 130, 205, 195, 106, 61, 74, 203, 103, 135, 188, 98, 253, 207, 213, 255, 133, 52, 63, 163, 241, 156, 44, 123, 158, 8, 194, 46, 220, 69, 64, 211, 23, 251, 153, 192, 236, 50, 165, 132, 215, 77, 253, 190, 206, 109, 101, 231, 107, 152, 87, 86, 176, 148, 211, 196, 144, 152, 211, 26, 24, 254, 248, 148, 10, 51, 57, 182, 237, 185, 88, 132, 250, 9, 94, 208, 54, 103, 169, 174, 77, 146, 168, 255, 138, 53, 244, 11, 200, 90, 49, 249, 39, 180, 100, 176, 244, 36, 10, 114, 6, 97, 212, 241, 39, 24, 182, 6, 154, 147, 44, 166, 61, 215, 241, 144, 111, 50, 176, 88, 197, 204, 193, 49, 242, 193, 158, 143, 51, 68, 137, 129, 17, 162, 169, 128, 78, 248, 226, 77, 71, 11, 57, 77, 22, 223, 53, 191, 232, 121, 85, 246, 161, 252, 140, 129, 0, 88, 156, 194, 115, 149, 161, 9, 80, 50, 216, 153, 87, 15, 92, 35, 128, 111, 23, 200, 82, 78, 179, 155, 88, 71, 101, 133, 124, 223, 201, 217, 243, 6, 171, 225, 20, 249, 125, 108, 195, 56, 59, 43, 123, 173, 186, 240, 1, 233, 74, 233, 59, 158, 244, 242, 227, 104, 234, 218, 145, 180, 53, 133, 195, 98, 134, 29];

        let key1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2];
        let key2 = [124, 14, 77, 177, 242, 71, 223, 200, 3, 193, 30, 184, 45, 24, 54, 44, 105, 209, 144, 224, 1, 1, 38, 244, 91, 82, 209, 250, 7, 247, 168, 193];

        let checksum = [225, 29, 207, 202, 14, 201, 88, 44, 83, 206, 195, 32];

        let hmacker = ChecksumSuite::HmacSha196Aes256.hasher();

        // println!("{}", &checksum == hmacker.checksum(&key1, 23, &data1).unwrap().as_slice());
        println!("{}", &checksum == hmacker.checksum(&key1, 41, &data1).unwrap().as_slice());
        println!("{}", &checksum == hmacker.checksum(&key2, 41, &data1).unwrap().as_slice());

        for i in 1..100 {
            if &checksum == hmacker.checksum(&key1, i, &data1).unwrap().as_slice() {
                println!("found in key 1: {}", i);
            }
            if &checksum == hmacker.checksum(&key2, i, &data1).unwrap().as_slice() {
                println!("found in key 2: {}", i);
            }
        }
        // println!("{}", &checksum == hmacker.checksum(&key2, 25, &data1).unwrap().as_slice());

        // println!("{}", &checksum == hmacker.checksum(&key1, 23, &data2).unwrap().as_slice());
        // println!("{}", &checksum == hmacker.checksum(&key1, 25, &data2).unwrap().as_slice());
        // println!("{}", &checksum == hmacker.checksum(&key2, 23, &data2).unwrap().as_slice());
        // println!("{}", &checksum == hmacker.checksum(&key2, 25, &data2).unwrap().as_slice());

        // println!("{}", &checksum == hmacker.checksum(&key1, 23, &data3).unwrap().as_slice());
        // println!("{}", &checksum == hmacker.checksum(&key1, 25, &data3).unwrap().as_slice());
        // println!("{}", &checksum == hmacker.checksum(&key2, 23, &data3).unwrap().as_slice());
        // println!("{}", &checksum == hmacker.checksum(&key2, 25, &data3).unwrap().as_slice());

        // println!("{}", &checksum == hmacker.checksum(&key1, 23, &data4).unwrap().as_slice());
        // println!("{}", &checksum == hmacker.checksum(&key1, 25, &data4).unwrap().as_slice());
        // println!("{}", &checksum == hmacker.checksum(&key2, 23, &data4).unwrap().as_slice());
        // println!("{}", &checksum == hmacker.checksum(&key2, 25, &data4).unwrap().as_slice());
    }

    #[test]
    fn verify_authenticator_checksum() {
        let data1 = [48, 78, 48, 76, 160, 3, 2, 1, 1, 161, 69, 4, 67, 48, 65, 48, 63, 160, 4, 2, 2, 0, 141, 161, 55, 4, 53, 48, 51, 48, 49, 160, 3, 2, 1, 0, 161, 42, 4, 40, 1, 0, 0, 0, 0, 32, 0, 0, 92, 95, 64, 72, 191, 160, 228, 23, 98, 35, 78, 151, 207, 227, 96, 126, 97, 180, 15, 98, 127, 211, 90, 177, 119, 132, 45, 113, 206, 90, 169, 124];
        let key1 = [198, 211, 172, 206, 204, 190, 143, 153, 82, 144, 117, 94, 153, 99, 144, 212, 211, 135, 176, 70, 134, 241, 23, 87, 4, 202, 88, 5, 233, 195, 37, 230];
        let key2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2];
        let checksum = [18, 161, 21, 144, 10, 142, 30, 103, 57, 75, 246, 6];

        let hmacker = ChecksumSuite::HmacSha196Aes256.hasher();

        for i in 1..100 {
            if &checksum == hmacker.checksum(&key1, i, &data1).unwrap().as_slice() {
                println!("here: {}", i);
            }
        }

        for i in 1..100 {
            if &checksum == hmacker.checksum(&key2, i, &data1).unwrap().as_slice() {
                println!("here: {}", i);
            }
        }
    }

    #[test]
    fn decrypt_pub_key_auth() {
        let data = [203, 146, 230, 11, 20, 98, 198, 51, 49, 122, 91, 183, 216, 48, 207, 19, 122, 99, 223, 121, 139, 21, 32, 115, 96, 67, 129, 28, 181, 111, 33, 28, 74, 101, 53, 34, 144, 147, 253, 250, 126, 46, 91, 81, 48, 85, 2, 33, 106, 34, 22, 234, 179, 20, 247, 197, 113, 237, 243, 9, 32, 244, 114, 237, 120, 215, 57, 68, 157, 38, 234, 141, 115, 33, 252, 161];
        let mut data_rotated = data.to_vec();
        data_rotated.rotate_left(28);
        // ap_rep
        let key_1 = [2, 3, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9];
        // auth
        // let key_2 =  [74, 16, 199, 49, 172, 146, 171, 169, 116, 211, 209, 113, 64, 193, 179, 35, 216, 179, 2, 158, 60, 239, 52, 8, 62, 13, 246, 126, 8, 158, 57, 231];
        // session
        // let key_3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2];
        // dh
        // let key_4 = [13, 188, 89, 204, 0, 181, 160, 234, 215, 132, 88, 4, 250, 41, 12, 126, 159, 182, 237, 139, 20, 51, 109, 42, 19, 146, 238, 236, 255, 32, 159, 84];

        let cipher = CipherSuite::Aes256CtsHmacSha196.cipher();

        if let Ok(data) = cipher.decrypt(&key_1, 24, &data_rotated) {
            println!("r: using key_1 and {}: {:?}", 24, data);
        }
    }

    #[test]
    fn validate_pub_key_auth() {
        let sha256_hash = [29, 126, 187, 134, 84, 154, 168, 80, 159, 1, 45, 85, 188, 181, 91, 197, 39, 187, 68, 54, 244, 182, 97, 132, 232, 127, 110, 123, 164, 103, 245, 84];

        let client_nonce = [151, 82, 26, 188, 144, 54, 149, 18, 67, 21, 87, 56, 80, 202, 149, 20, 9, 148, 199, 138, 63, 18, 197, 114, 65, 153, 37, 40, 185, 237, 186, 230];
        // let public_key = [48, 130, 1, 34, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0, 3, 130, 1, 15, 0, 48, 130, 1, 10, 2, 130, 1, 1, 0, 205, 145, 202, 14, 211, 90, 9, 57, 201, 82, 174, 149, 31, 144, 56, 21, 255, 170, 18, 31, 144, 135, 109, 251, 163, 28, 59, 223, 208, 158, 196, 250, 235, 72, 119, 207, 27, 111, 174, 26, 191, 111, 119, 254, 246, 121, 105, 241, 139, 246, 224, 36, 79, 243, 64, 59, 121, 255, 77, 254, 198, 138, 194, 237, 252, 149, 123, 7, 230, 18, 178, 118, 194, 47, 128, 5, 199, 153, 59, 90, 147, 77, 117, 0, 254, 85, 14, 197, 132, 169, 142, 94, 250, 217, 89, 82, 175, 157, 44, 174, 96, 169, 202, 110, 170, 184, 128, 245, 14, 74, 254, 10, 132, 168, 46, 43, 48, 162, 113, 66, 120, 53, 83, 219, 172, 67, 28, 175, 176, 38, 97, 154, 53, 210, 137, 170, 241, 184, 156, 124, 175, 142, 172, 19, 0, 16, 77, 121, 115, 59, 31, 42, 84, 105, 121, 113, 199, 177, 124, 100, 73, 151, 42, 96, 229, 100, 158, 250, 34, 18, 125, 245, 73, 180, 154, 236, 64, 109, 130, 187, 83, 115, 15, 251, 21, 235, 147, 15, 96, 61, 6, 248, 7, 83, 60, 123, 178, 187, 116, 102, 99, 121, 134, 233, 14, 142, 1, 28, 214, 57, 144, 104, 15, 159, 157, 235, 241, 240, 145, 131, 145, 109, 35, 203, 21, 245, 176, 130, 140, 121, 77, 230, 215, 176, 176, 107, 190, 173, 87, 116, 34, 184, 136, 214, 44, 153, 173, 67, 113, 219, 216, 128, 121, 25, 244, 141, 2, 3, 1, 0, 1];
        let public_key = [48, 130, 1, 10, 2, 130, 1, 1, 0, 205, 145, 202, 14, 211, 90, 9, 57, 201, 82, 174, 149, 31, 144, 56, 21, 255, 170, 18, 31, 144, 135, 109, 251, 163, 28, 59, 223, 208, 158, 196, 250, 235, 72, 119, 207, 27, 111, 174, 26, 191, 111, 119, 254, 246, 121, 105, 241, 139, 246, 224, 36, 79, 243, 64, 59, 121, 255, 77, 254, 198, 138, 194, 237, 252, 149, 123, 7, 230, 18, 178, 118, 194, 47, 128, 5, 199, 153, 59, 90, 147, 77, 117, 0, 254, 85, 14, 197, 132, 169, 142, 94, 250, 217, 89, 82, 175, 157, 44, 174, 96, 169, 202, 110, 170, 184, 128, 245, 14, 74, 254, 10, 132, 168, 46, 43, 48, 162, 113, 66, 120, 53, 83, 219, 172, 67, 28, 175, 176, 38, 97, 154, 53, 210, 137, 170, 241, 184, 156, 124, 175, 142, 172, 19, 0, 16, 77, 121, 115, 59, 31, 42, 84, 105, 121, 113, 199, 177, 124, 100, 73, 151, 42, 96, 229, 100, 158, 250, 34, 18, 125, 245, 73, 180, 154, 236, 64, 109, 130, 187, 83, 115, 15, 251, 21, 235, 147, 15, 96, 61, 6, 248, 7, 83, 60, 123, 178, 187, 116, 102, 99, 121, 134, 233, 14, 142, 1, 28, 214, 57, 144, 104, 15, 159, 157, 235, 241, 240, 145, 131, 145, 109, 35, 203, 21, 245, 176, 130, 140, 121, 77, 230, 215, 176, 176, 107, 190, 173, 87, 116, 34, 184, 136, 214, 44, 153, 173, 67, 113, 219, 216, 128, 121, 25, 244, 141, 2, 3, 1, 0, 1];

        let mut payload_1 = SERVER_CLIENT_HASH_MAGIC.to_vec();
        payload_1.extend_from_slice(&client_nonce);
        payload_1.extend_from_slice(&public_key);

        let mut payload_2 = CLIENT_SERVER_HASH_MAGIC.to_vec();
        payload_2.extend_from_slice(&client_nonce);
        payload_2.extend_from_slice(&public_key);

        println!("{}", &sha256_hash == compute_sha256(&payload_1).as_slice());
        println!("{}", &sha256_hash == compute_sha256(&payload_2).as_slice());
    }

    fn try_it(vs: Vec<Vec<u8>>) {
        let hash = [137, 141, 156, 76, 74, 183, 58, 112, 102, 14, 242, 197, 28, 2, 101, 120, 62, 52, 39, 216, 21, 192, 15, 232, 108, 119, 155, 30, 16, 113, 14, 70];

        let is = [
            [0, 1, 2, 3],
            // [0, 1, 3, 2],
            [0, 2, 1, 3],
            // [0, 2, 3, 1],
            // [0, 3, 1, 2],
            // [0, 3, 2, 1],
            [1, 0, 2, 3],
            // [1, 0, 3, 2],
            [1, 2, 0, 3],
            // [1, 2, 3, 0],
            // [1, 3, 0, 2],
            // [1, 3, 2, 0],
            [2, 0, 1, 3],
            // [2, 0, 3, 1],
            [2, 1, 0, 3],
            // [2, 1, 3, 0],
            // [2, 3, 0, 1],
            // [2, 3, 1, 0],
            // [3, 0, 1, 2],
            // [3, 0, 2, 1],
            // [3, 1, 0, 2],
            // [3, 1, 2, 0],
            // [3, 2, 0, 1],
            // [3, 2, 1, 0],
        ];

        for i in is {
            let mut payload = vs[i[0]].clone();
            payload.extend_from_slice(&vs[i[1]]);
            payload.extend_from_slice(&vs[i[2]]);
            // payload.extend_from_slice(&vs[i[3]]);

            if &hash == compute_sha256(&payload).as_slice() {
                println!("I WIN!");
            }
        }
    }

    #[test]
    fn hack() {
        // client nonce
        let p1 = [167, 160, 86, 46, 171, 207, 115, 77, 182, 219, 18, 73, 205, 150, 2, 5, 23, 21, 226, 217, 76, 248, 10, 115, 192, 95, 101, 60, 104, 159, 173, 21];
        // pk
        let p2 = [48, 130, 1, 34, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0, 3, 130, 1, 15, 0, 48, 130, 1, 10, 2, 130, 1, 1, 0, 205, 145, 202, 14, 211, 90, 9, 57, 201, 82, 174, 149, 31, 144, 56, 21, 255, 170, 18, 31, 144, 135, 109, 251, 163, 28, 59, 223, 208, 158, 196, 250, 235, 72, 119, 207, 27, 111, 174, 26, 191, 111, 119, 254, 246, 121, 105, 241, 139, 246, 224, 36, 79, 243, 64, 59, 121, 255, 77, 254, 198, 138, 194, 237, 252, 149, 123, 7, 230, 18, 178, 118, 194, 47, 128, 5, 199, 153, 59, 90, 147, 77, 117, 0, 254, 85, 14, 197, 132, 169, 142, 94, 250, 217, 89, 82, 175, 157, 44, 174, 96, 169, 202, 110, 170, 184, 128, 245, 14, 74, 254, 10, 132, 168, 46, 43, 48, 162, 113, 66, 120, 53, 83, 219, 172, 67, 28, 175, 176, 38, 97, 154, 53, 210, 137, 170, 241, 184, 156, 124, 175, 142, 172, 19, 0, 16, 77, 121, 115, 59, 31, 42, 84, 105, 121, 113, 199, 177, 124, 100, 73, 151, 42, 96, 229, 100, 158, 250, 34, 18, 125, 245, 73, 180, 154, 236, 64, 109, 130, 187, 83, 115, 15, 251, 21, 235, 147, 15, 96, 61, 6, 248, 7, 83, 60, 123, 178, 187, 116, 102, 99, 121, 134, 233, 14, 142, 1, 28, 214, 57, 144, 104, 15, 159, 157, 235, 241, 240, 145, 131, 145, 109, 35, 203, 21, 245, 176, 130, 140, 121, 77, 230, 215, 176, 176, 107, 190, 173, 87, 116, 34, 184, 136, 214, 44, 153, 173, 67, 113, 219, 216, 128, 121, 25, 244, 141, 2, 3, 1, 0, 1];
        // client negoex nonce
        let p3 = [85, 64, 105, 87, 129, 69, 222, 254, 36, 159, 112, 18, 249, 74, 108, 135, 146, 132, 49, 72, 193, 144, 183, 119, 47, 81, 105, 196, 254, 190, 221, 87];
        // server negoex nonce
        let p4 = [10, 209, 111, 101, 206, 151, 53, 222, 225, 32, 241, 24, 15, 201, 210, 38, 133, 175, 97, 251, 27, 195, 152, 39, 9, 97, 115, 227, 194, 196, 54, 245];

        let m1 = SERVER_CLIENT_HASH_MAGIC.to_vec();
        let m2 = CLIENT_SERVER_HASH_MAGIC.to_vec();


        println!("not win?");
    }
}
